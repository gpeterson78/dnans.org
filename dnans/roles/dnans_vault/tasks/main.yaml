---
# Step 1: Load default vault template
- name: Load default vault template
  template:
    src: vault.default.yaml
    dest: /tmp/vault.default.yaml
  check_mode: no  # Always generate the temporary file

# Step 2: Verify the template file exists
- name: Check if /tmp/vault.default.yaml exists
  stat:
    path: /tmp/vault.default.yaml
  register: vault_temp_file

- name: Fail if /tmp/vault.default.yaml was not created
  fail:
    msg: "The vault.default.yaml was not created in /tmp."
  when: not vault_temp_file.stat.exists

# Step 3: Parse the default vault values
- name: Parse default vault values
  slurp:
    src: /tmp/vault.default.yaml
  register: default_vault_content

- name: Convert default vault values to variable
  set_fact:
    default_vault: "{{ default_vault_content['content'] | b64decode | from_yaml }}"

# Step 4: Check if vault.yaml exists
- name: Check if vault.yaml exists
  stat:
    path: "{{ playbook_dir }}/vault.yaml"
  register: vault_file
  ignore_errors: true

# Ensure the vault_file variable is always defined
- name: Ensure vault_file variable is defined
  set_fact:
    vault_file: { "stat": { "exists": false } }
  when: vault_file is not defined

# Step 5: Decrypt and load existing vault.yaml if it exists
- name: Load existing vault.yaml if it exists
  command: "ansible-vault view {{ playbook_dir }}/vault.yaml"
  register: existing_vault_raw
  failed_when: existing_vault_raw.rc != 0
  when: vault_file.stat.exists

- name: Parse decrypted vault.yaml content
  set_fact:
    existing_vault: "{{ existing_vault_raw.stdout | from_yaml }}"
  when: vault_file.stat.exists

# Step 6: Initialize an empty vault if it doesn't exist
- name: Initialize empty vault if missing
  set_fact:
    existing_vault: {}
  when: existing_vault is not defined

# Step 7: Merge default and existing vault, generate missing sensitive values
- name: Merge vaults and generate missing sensitive values
  set_fact:
    updated_vault: >-
      {{
        default_vault | combine(existing_vault, recursive=True) | combine({
          'immich_database_password': (existing_vault.immich_database_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))),
          'immich_database_root_password': (existing_vault.immich_database_root_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))),
          'wordpress_db_password': (existing_vault.wordpress_db_password | default(lookup('password', '/dev/null length=16 chars=ascii_letters,digits'))),
          'wordpress_db_root_password': (existing_vault.wordpress_db_root_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits')))
        })
      }}

# Step 8: Save the updated vault.yaml
- name: Save updated vault.yaml
  copy:
    content: "{{ updated_vault | to_nice_yaml }}"
    dest: "{{ playbook_dir }}/vault.yaml"
    owner: root
    group: root
    mode: '0600'
  no_log: true
  when: not ansible_check_mode

# Step 9: Encrypt the vault.yaml file
- name: Encrypt vault.yaml
  command: "ansible-vault encrypt {{ playbook_dir }}/vault.yaml"
  when: not ansible_check_mode and (vault_file.stat.exists == false or existing_vault_raw.stdout != updated_vault | to_nice_yaml)
