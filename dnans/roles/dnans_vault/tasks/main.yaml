---
# Step 1: Load default vault template
- name: Load default vault template
  template:
    src: vault.default.yaml
    dest: /tmp/vault.default.yaml
  check_mode: no  # Always generate the temporary file

# Step 2: Parse the default vault values
- name: Parse default vault values
  slurp:
    src: /tmp/vault.default.yaml
  register: default_vault_content

- name: Convert default vault values to variable
  set_fact:
    default_vault: "{{ default_vault_content['content'] | b64decode | from_yaml }}"

# Step 3: Check if vault.yaml exists
- name: Check if vault.yaml exists
  stat:
    path: "{{ playbook_dir }}/vault.yaml"
  register: vault_file

# Step 4: Verify if the existing vault.yaml is encrypted
- name: Check if vault.yaml is encrypted
  command: "ansible-vault is_encrypted {{ playbook_dir }}/vault.yaml"
  register: vault_encryption_status
  ignore_errors: true
  when: vault_file.stat.exists

# Step 5: Load existing vault.yaml if it is encrypted
- name: Decrypt and load existing vault.yaml
  command: "ansible-vault view {{ playbook_dir }}/vault.yaml"
  register: existing_vault_raw
  when: vault_file.stat.exists and vault_encryption_status.rc == 0

- name: Parse decrypted vault.yaml content
  set_fact:
    existing_vault: "{{ existing_vault_raw.stdout | from_yaml }}"
  when: vault_file.stat.exists and vault_encryption_status.rc == 0

# Step 6: Handle unencrypted vault.yaml
- name: Load unencrypted vault.yaml content
  slurp:
    src: "{{ playbook_dir }}/vault.yaml"
  register: unencrypted_vault_raw
  when: vault_file.stat.exists and vault_encryption_status.rc != 0

- name: Parse unencrypted vault.yaml content
  set_fact:
    existing_vault: "{{ unencrypted_vault_raw['content'] | b64decode | from_yaml }}"
  when: vault_file.stat.exists and vault_encryption_status.rc != 0

# Step 7: Encrypt vault.yaml if it was unencrypted
- name: Encrypt unencrypted vault.yaml
  command: "ansible-vault encrypt {{ playbook_dir }}/vault.yaml"
  when: vault_file.stat.exists and vault_encryption_status.rc != 0

# Step 8: Initialize an empty vault if missing
- name: Initialize empty vault if missing
  set_fact:
    existing_vault: {}
  when: existing_vault is not defined

# Step 9: Merge default and existing vault, generate missing sensitive values
- name: Merge vaults and generate missing sensitive values
  set_fact:
    updated_vault: >-
      {{
        default_vault | combine(existing_vault, recursive=True) | combine({
          'immich_database_password': (existing_vault.immich_database_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))),
          'immich_database_root_password': (existing_vault.immich_database_root_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))),
          'wordpress_db_password': (existing_vault.wordpress_db_password | default(lookup('password', '/dev/null length=16 chars=ascii_letters,digits'))),
          'wordpress_db_root_password': (existing_vault.wordpress_db_root_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits')))
        })
      }}

# Step 10: Save the updated vault.yaml
- name: Save updated vault.yaml
  copy:
    content: "{{ updated_vault | to_nice_yaml }}"
    dest: "{{ playbook_dir }}/vault.yaml"
    owner: root
    group: root
    mode: '0600'
  no_log: true
  when: not ansible_check_mode

# Step 11: Encrypt vault.yaml if it was newly created
- name: Encrypt newly created vault.yaml
  command: "ansible-vault encrypt {{ playbook_dir }}/vault.yaml"
  when: not ansible_check_mode and (vault_file.stat.exists == false)
