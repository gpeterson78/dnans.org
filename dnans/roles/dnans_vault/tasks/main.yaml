---
# Step 1: Load default vault template
- name: Load default vault template
  template:
    src: vault.default.yaml
    dest: /tmp/vault.default.yaml
  check_mode: no  # Always generate the temporary file

# Step 2: Parse the default vault values
- name: Parse default vault values
  slurp:
    src: /tmp/vault.default.yaml
  register: default_vault_content

- name: Convert default vault values to variable
  set_fact:
    default_vault: "{{ default_vault_content['content'] | b64decode | from_yaml }}"

# Step 3: Check if vault.yaml exists
- name: Check if vault.yaml exists
  stat:
    path: "{{ playbook_dir }}/vault.yaml"
  register: vault_file

# Step 4: Ensure the vault.yaml is encrypted if it exists
- name: Check if vault.yaml is encrypted
  command: "ansible-vault view {{ playbook_dir }}/vault.yaml"
  register: vault_encryption_status
  ignore_errors: true
  when: vault_file.stat.exists

- name: Fail if vault.yaml is unencrypted
  fail:
    msg: "The vault.yaml file exists but is unencrypted. Please encrypt it manually or remove it."
  when: vault_file.stat.exists and vault_encryption_status.rc != 0

# Step 5: Decrypt and load existing vault.yaml if encrypted
- name: Parse existing vault.yaml content
  set_fact:
    existing_vault: "{{ vault_encryption_status.stdout | from_yaml }}"
  when: vault_file.stat.exists and vault_encryption_status.rc == 0

# Step 6: Initialize a new encrypted vault.yaml if missing
- name: Prepare new vault content
  set_fact:
    new_vault_content: >-
      {{
        default_vault | combine({
          'immich_database_password': (lookup('password', '/dev/null length=31 chars=ascii_letters,digits')),
          'immich_database_root_password': (lookup('password', '/dev/null length=31 chars=ascii_letters,digits')),
          'wordpress_db_password': (lookup('password', '/dev/null length=16 chars=ascii_letters,digits')),
          'wordpress_db_root_password': (lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))
        })
      }}
  when: not vault_file.stat.exists

- name: Save new vault.yaml content to a temporary file
  copy:
    content: "{{ new_vault_content | to_nice_yaml }}"
    dest: "/tmp/vault.yaml"
    mode: '0600'
  when: not vault_file.stat.exists

- name: Encrypt and move the new vault.yaml to the project directory
  command: "ansible-vault encrypt /tmp/vault.yaml --output={{ playbook_dir }}/vault.yaml"
  when: not vault_file.stat.exists

# Step 7: Merge and update vault.yaml with new values
- name: Merge vaults and generate missing sensitive values
  set_fact:
    new_vault_content: >-
      {{
        default_vault | combine(existing_vault, recursive=True) | combine({
          'immich_database_password': (existing_vault.immich_database_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))),
          'immich_database_root_password': (existing_vault.immich_database_root_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))),
          'wordpress_db_password': (existing_vault.wordpress_db_password | default(lookup('password', '/dev/null length=16 chars=ascii_letters,digits'))),
          'wordpress_db_root_password': (existing_vault.wordpress_db_root_password | default(lookup('password', '/dev/null length=31 chars=ascii_letters,digits'))),
          'smb_password': (existing_vault.smb_password | default(lookup('password', '/dev/null length=16 chars=ascii_letters,digits')))
        })
      }}


# Step 8
- name: Prompt for ansible_become_pass if not set
  pause:
    prompt: "Enter the ansible_become_pass (sudo password):"
  register: become_pass_input
  when: new_vault_content.ansible_become_pass | default('') == ""

- name: Update ansible_become_pass in vault content
  set_fact:
    new_vault_content:
      "{{ new_vault_content | combine({'ansible_become_pass': become_pass_input.user_input}) }}"
  when: become_pass_input is defined

  # Step 9

- name: Save new vault.yaml content to a temporary file
  copy:
    content: "{{ new_vault_content | to_nice_yaml }}"
    dest: "/tmp/vault.yaml"
    mode: '0600'
  when: not vault_file.stat.exists

- name: Encrypt and replace vault.yaml
  command: "ansible-vault encrypt /tmp/vault.yaml --output={{ playbook_dir }}/vault.yaml"
  when: vault_file.stat.exists
